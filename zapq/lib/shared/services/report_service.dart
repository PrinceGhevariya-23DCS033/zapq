import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:intl/intl.dart';

class ReportService {
  static Future<String> generateBusinessReport({
    required String businessName,
    required DateTime startDate,
    required DateTime endDate,
    required Map<String, dynamic> financialData,
    required Map<String, dynamic> customerData,
    required Map<String, dynamic> serviceData,
  }) async {
    try {
      // Create a simple text report
      final StringBuffer report = StringBuffer();
      
      // Header
      report.writeln('=' * 50);
      report.writeln('BUSINESS ANALYTICS REPORT');
      report.writeln('=' * 50);
      report.writeln('Business: $businessName');
      report.writeln('Period: ${DateFormat('MMM dd, yyyy').format(startDate)} - ${DateFormat('MMM dd, yyyy').format(endDate)}');
      report.writeln('Generated: ${DateFormat('MMM dd, yyyy ‚Ä¢ hh:mm a').format(DateTime.now())}');
      report.writeln();
      
      // Financial Summary
      report.writeln('FINANCIAL SUMMARY');
      report.writeln('-' * 20);
      report.writeln('Total Revenue: \$${_formatNumber(financialData['totalRevenue'] ?? 0)}');
      report.writeln('Total Bookings: ${_formatNumber(financialData['totalBookings'] ?? 0)}');
      report.writeln('Average Booking Value: \$${_formatNumber(financialData['averageBookingValue'] ?? 0)}');
      report.writeln('Revenue Growth: ${financialData['revenueGrowth'] ?? 0}%');
      report.writeln('Booking Growth: ${financialData['bookingGrowth'] ?? 0}%');
      report.writeln();
      
      // Customer Analytics
      report.writeln('CUSTOMER ANALYTICS');
      report.writeln('-' * 20);
      report.writeln('Total Customers: ${_formatNumber(customerData['totalCustomers'] ?? 0)}');
      report.writeln('New Customers: ${_formatNumber(customerData['newCustomers'] ?? 0)}');
      report.writeln('Repeat Customers: ${_formatNumber(customerData['repeatCustomers'] ?? 0)}');
      report.writeln('Customer Retention Rate: ${(customerData['customerRetentionRate'] ?? 0).toStringAsFixed(1)}%');
      report.writeln('Average Rating: ${(customerData['averageRating'] ?? 0.0).toStringAsFixed(1)}/5.0');
      report.writeln('Total Reviews: ${customerData['totalReviews'] ?? 0}');
      report.writeln();
      
      // Service Performance
      report.writeln('SERVICE PERFORMANCE');
      report.writeln('-' * 20);
      report.writeln('Total Services: ${serviceData['totalServices'] ?? 0}');
      report.writeln('Most Popular Service: ${serviceData['mostPopularService'] ?? 'N/A'}');
      report.writeln('Most Profitable Service: ${serviceData['mostProfitableService'] ?? 'N/A'}');
      report.writeln();
      
      // Service Breakdown
      final serviceBookingCount = serviceData['serviceBookingCount'] as Map<String, int>? ?? {};
      final serviceRevenue = serviceData['serviceRevenue'] as Map<String, double>? ?? {};
      
      if (serviceBookingCount.isNotEmpty) {
        report.writeln('SERVICE BREAKDOWN');
        report.writeln('-' * 20);
        for (var entry in serviceBookingCount.entries) {
          final serviceName = entry.key;
          final bookings = entry.value;
          final revenue = serviceRevenue[serviceName] ?? 0.0;
          report.writeln('$serviceName:');
          report.writeln('  Bookings: $bookings');
          report.writeln('  Revenue: \$${_formatNumber(revenue)}');
          report.writeln();
        }
      }
      
      // Rating Distribution
      report.writeln('CUSTOMER RATING DISTRIBUTION');
      report.writeln('-' * 30);
      final ratingDistribution = customerData['ratingDistribution'] as Map<int, int>? ?? {};
      for (int i = 5; i >= 1; i--) {
        final count = ratingDistribution[i] ?? 0;
        final total = customerData['totalReviews'] as int? ?? 0;
        final percentage = total > 0 ? (count / total * 100).toStringAsFixed(1) : '0.0';
        report.writeln('$i Stars: $count reviews ($percentage%)');
      }
      report.writeln();
      
      // Daily Revenue Trends
      final dailyRevenue = financialData['dailyRevenue'] as Map<String, dynamic>? ?? {};
      if (dailyRevenue.isNotEmpty) {
        report.writeln('TOP REVENUE DAYS');
        report.writeln('-' * 20);
        final sortedDays = dailyRevenue.entries.toList()
          ..sort((a, b) => (b.value as double).compareTo(a.value as double));
        
        for (var entry in sortedDays.take(10)) {
          final date = DateTime.parse('${entry.key}T00:00:00');
          final revenue = entry.value as double;
          report.writeln('${DateFormat('MMM dd, yyyy').format(date)}: \$${_formatNumber(revenue)}');
        }
        report.writeln();
      }
      
      // Footer
      report.writeln('=' * 50);
      report.writeln('Report generated by ZapQ Business Analytics');
      report.writeln('¬© ${DateTime.now().year} ZapQ. All rights reserved.');
      report.writeln('=' * 50);
      
      // Save to file
      final directory = await getApplicationDocumentsDirectory();
      final fileName = 'business_report_${DateFormat('yyyy_MM_dd_HHmm').format(DateTime.now())}.txt';
      final file = File('${directory.path}/$fileName');
      await file.writeAsString(report.toString());
      
      return file.path;
    } catch (e) {
      print('‚ùå Error generating report: $e');
      throw Exception('Failed to generate report: $e');
    }
  }
  
  static String _formatNumber(dynamic number) {
    if (number == null) return '0';
    if (number is int) return NumberFormat('#,###').format(number);
    if (number is double) return NumberFormat('#,###.##').format(number);
    return number.toString();
  }
  
  static Future<void> shareReport(String filePath) async {
    try {
      // For now, just show a snackbar with the file path
      // In a real app, you would use share_plus package
      print('üìÑ Report saved to: $filePath');
    } catch (e) {
      print('‚ùå Error sharing report: $e');
      throw Exception('Failed to share report: $e');
    }
  }
}